{"version":3,"sources":["Context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layout/Header.js","components/pages/About.js","components/layout/TextInputGroup.js","components/AddContact.js","components/contacts/EditContact.js","components/pages/NotFound.js","components/test/Test.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","map","Provider","dispatch","setState","axios","get","res","this","data","value","props","children","Component","Consumer","Contact","showContactInfo","onDeleteClick","a","delete","name","email","phone","className","onClick","style","cursor","float","color","bind","to","pointer","marginRight","Contacts","Fragment","key","Header","branding","href","defaultProps","About","TextInputGroup","label","placeholder","onChange","error","htmlFor","classnames","AddContact","errors","onSubmit","e","preventDefault","newContact","post","history","push","target","EditContact","updContact","match","params","put","NotFound","Test","title","body","fetch","then","response","json","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.5a0a2008.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport axios from 'axios';\r\n \r\nconst Context = React.createContext();\r\nconst reducer = (state, action) => {\r\n    switch(action.type){\r\n        case 'DELETE_CONTACT':\r\n            return{\r\n                ...state,\r\n                contacts: state.contacts.filter(contact => \r\n                    contact.id !== action.payload\r\n                )\r\n            };\r\n        case 'ADD_CONTACT':\r\n            return{\r\n                ...state,\r\n                contacts: [action.payload, ...state.contacts]\r\n            }; \r\n        case 'UPDATE_CONTACT':\r\n            return{\r\n                ...state,\r\n                contacts: state.contacts.map(contact => \r\n                    contact.id === action.payload.id ? (contact = action.payload) : contact)\r\n            }     \r\n            default:\r\n              return state;\r\n    }\r\n};\r\n export class Provider extends Component{\r\n    state = {\r\n        contacts: [],\r\n        dispatch: action => {\r\n            this.setState(state => reducer(state, action))\r\n        }\r\n};\r\nasync componentDidMount(){\r\n        const res = await axios.get('https://jsonplaceholder.typicode.com/users')\r\n    \r\n        this.setState({contacts: res.data});\r\n}\r\nrender(){\r\n    return(\r\n        <Context.Provider value={this.state}>\r\n            {this.props.children}\r\n        </Context.Provider>\r\n    )\r\n}\r\n}\r\n\r\nexport const Consumer = Context.Consumer;","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './contact.css'\r\nimport {Consumer} from '../../Context';\r\nimport axios from 'axios';\r\nimport { Link} from 'react-router-dom';\r\n\r\n\r\n\r\nclass Contact extends Component {\r\n    state = {\r\n        showContactInfo: false\r\n    };\r\n    onDeleteClick = async (id, dispatch) => {\r\n        try{\r\n       await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n       dispatch({type: 'DELETE_CONTACT', payload: id});\r\n        }catch(e){\r\n            dispatch({type: 'DELETE_CONTACT', payload: id});\r\n        }\r\n    };\r\n\r\n      \r\n    \r\n    render() {\r\n        const { id, name, email, phone} = this.props.contact;\r\n        const {showContactInfo} = this.state;\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const {dispatch} = value;\r\n                    return(\r\n                        <div className=\"card card-body mb-3\">\r\n            <h4>{name}<i onClick={() => {  this.setState({showContactInfo: !this.state.showContactInfo})}} className=\"fa fa-sort-down\" style={{cursor: 'pointer'}}></i>\r\n              <i className=\"fa fa-times\" style={{cursor: 'pointer', float: 'right', color: 'red'}} onClick={this.onDeleteClick.bind(this, id, dispatch)}></i>\r\n              <Link to={`contact/edit/${id}`}>\r\n                  <i className=\"fa fa-edit\"\r\n                     style={{\r\n                         pointer: 'cursor',\r\n                         color: 'black',\r\n                         float: 'right',\r\n                         marginRight: '1rem'\r\n                     }} ></i>\r\n              </Link>\r\n            </h4>\r\n            {showContactInfo ? (  <ul className=\"list-group\">\r\n                    <li className=\"list-group-item\">Email: {email}</li>\r\n                    <li className=\"list-group-item\">Phone: {phone}</li>\r\n                </ul>) : null}\r\n              \r\n            </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n\r\n        )\r\n    }\r\n}\r\nContact.propTypes = {\r\n    contact: PropTypes.object.isRequired,\r\n    // email: PropTypes.string.isRequired,\r\n    // phone: PropTypes.string.isRequired\r\n};\r\nexport default Contact;","import React, { Component } from 'react'\r\nimport Contact from './Contact';\r\nimport {Consumer} from '../../Context';\r\n\r\n\r\nclass Contacts extends Component {\r\n\r\n    // deleteContact = (id) => {\r\n    //     const {contacts} = this.state;\r\n    //     const newContacts = contacts.filter(contact => \r\n    //         contact.id !== id\r\n    //     );\r\n    //     this.setState({contacts: newContacts});//copy of the state without the one that we have deleted\r\n    // };\r\n\r\n    \r\n    render() {\r\n        return(\r\n            <Consumer>\r\n                {value => { \r\n                    const {contacts} = value;\r\n                    return( \r\n            <React.Fragment>\r\n              <h1 className=\"display-4 mb-2\"><span className=\"text-danger\">Contact</span> List</h1>\r\n                {contacts.map(contact => (\r\n                    <Contact\r\n                    key={contact.id} \r\n                    contact={contact}\r\n                    />\r\n                    //  name={contact.name}\r\n                    //  email={contact.email}\r\n                    //  phone={contact.phone} />\r\n                ))}\r\n            </React.Fragment>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        );\r\n       \r\n}\r\n}\r\nexport default Contacts;\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n const Header = (props) => {\r\n    const {branding} = props;\r\n    return (\r\n        <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\">\r\n            <div className=\"container\">\r\n                <a href=\"/\" className=\"navbar-brand\">{branding}</a>\r\n                <div>\r\n                    <ul className=\"navbar-nav mr-auto\">\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/\" className=\"nav-link\"><i className=\"fa fa-home\" />Home </Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/contact/Add\" className=\"nav-link\"><i className=\"fa fa-plus\" />Add</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/about\" className=\"nav-link\"><i className=\"fa fa-question\" />About</Link>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </nav>     \r\n        \r\n    );\r\n};\r\n\r\n\r\nHeader.defaultProps = {\r\n    branding: 'my app'\r\n};\r\nHeader.propTypes = {\r\n    branding: PropTypes.string.isRequired \r\n};\r\nexport default Header;\r\n","import React from 'react'\r\n\r\nexport default function About() {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4\">About Contacts</h1>\r\n            <p className=\"lead\">Simple app to manage Contacts</p>\r\n            <p className=\"text-secondary\">Version 1.0.0</p>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames';\r\n\r\nconst TextInputGroup = ({\r\n    //props\r\n    label,\r\n    name,\r\n    value,\r\n    placeholder,\r\n    type,\r\n    onChange,\r\n    error\r\n}) => {\r\n    return (\r\n        <div className=\"form-group\">\r\n                            <label htmlFor={name}>{label} </label>\r\n                            <input type={type} name={name} className={classnames('form-control form-control-lg', {'is-invalid': error})} placeholder={placeholder} value={value} onChange={onChange} />\r\n                            {error && <div className=\"invalid-feedback\">{error}</div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nTextInputGroup.propTypes = {\r\n    label: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    error: PropTypes.string\r\n}\r\n\r\nTextInputGroup.defaultProps = {\r\n    type: 'text'\r\n}\r\n\r\nexport default TextInputGroup;","import React, { Component } from 'react'\r\nimport {Consumer} from '../Context';\r\nimport TextInputGroup from '../components/layout/TextInputGroup';\r\nimport axios from 'axios';\r\n\r\n class AddContact extends Component {\r\n     state = {\r\n         name: '',\r\n         email: '',\r\n         phone: '',\r\n         errors: {}\r\n     };\r\n     \r\n     onSubmit = async (dispatch, e) => {\r\n         e.preventDefault();\r\n         const {name, email, phone} = this.state;\r\n\r\n         if(name === ''){\r\n             this.setState({errors: {name: 'Name is required'}});\r\n             return;\r\n         }\r\n         if(email === ''){\r\n             this.setState({errors: {email: 'Email is required'}});\r\n             return;\r\n         }\r\n         if(phone === ''){\r\n             this.setState({errors: {phone: 'Phone is required'}});\r\n             return;\r\n         }\r\n         const newContact = {\r\n             name,\r\n             email,\r\n             phone\r\n         }\r\n         const res = await axios.post('https://jsonplaceholder.typicode.com/users',newContact);\r\n         dispatch({type: 'ADD_CONTACT', payload: res.data});\r\n         \r\n         this.setState({\r\n             //clear state\r\n            name: '',\r\n            email: '',\r\n            phone: '',\r\n            errors: {}\r\n            });\r\n            \r\n            this.props.history.push(\"/\");\r\n     };\r\n    // onEmailChange = (e) => this.setState({email: e.target.value});\r\n     //onPhoneChange = (e) => this.setState({phone: e.target.value});\r\n     onChange = e => this.setState({ [e.target.name] : e.target.value});\r\n    render() {\r\n        const {name, email, phone, errors} = this.state;\r\n\r\n        return(\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value;\r\n                    return(\r\n                        <div className=\"card mb-3\">\r\n                <div className=\"card-header\">Add Contact</div>\r\n                <div className=\"card-body\">\r\n                    <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                    <TextInputGroup\r\n                        label=\"Name\"\r\n                        name=\"name\"\r\n                        placeholder=\"Enter Name\"\r\n                        value={name}\r\n                        onChange={this.onChange}\r\n                        error={errors.name}\r\n                    />\r\n                    <TextInputGroup\r\n                        label=\"Email\"\r\n                        name=\"email\"\r\n                        type=\"email\"\r\n                        placeholder=\"Enter Email\"\r\n                        value={email}\r\n                        onChange={this.onChange}\r\n                        error={errors.email}\r\n                    />\r\n                    <TextInputGroup\r\n                        label=\"Phone\"\r\n                        name=\"phone\"\r\n                        placeholder=\"Enter Phone\"\r\n                        value={phone}\r\n                        onChange={this.onChange}\r\n                        error={errors.phone}\r\n                    />\r\n                       \r\n                        <input type=\"submit\" value=\"Add Contact\" className=\"btn btn-block btn-danger\"></input>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n                    );\r\n                }}\r\n            </Consumer>\r\n        );\r\n     \r\n    }\r\n}\r\nexport default AddContact;","import React, { Component } from 'react'\r\nimport {Consumer} from '../../Context';\r\nimport TextInputGroup from '../layout/TextInputGroup';\r\nimport axios from 'axios';\r\n\r\n class EditContact extends Component {\r\n     state = {\r\n         name: '',\r\n         email: '',\r\n         phone: '',\r\n         errors: {}\r\n     };\r\n     async componentDidMount(){\r\n         const { id } = this.props.match.params;\r\n         const res = await axios.get(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n         const contact = res.data;\r\n         this.setState({\r\n             name: contact.name,\r\n             email: contact.email,\r\n             phone: contact.phone\r\n         });\r\n     }\r\n     \r\n     onSubmit = async (dispatch, e) => {\r\n         e.preventDefault();\r\n         const {name, email, phone} = this.state;\r\n\r\n         if(name === ''){\r\n             this.setState({errors: {name: 'Name is required'}});\r\n             return;\r\n         }\r\n         if(email === ''){\r\n             this.setState({errors: {email: 'Email is required'}});\r\n             return;\r\n         }\r\n         if(phone === ''){\r\n             this.setState({errors: {phone: 'Phone is required'}});\r\n             return;\r\n         }\r\n\r\n         const updContact = {\r\n             name,\r\n             email,\r\n             phone\r\n         };\r\n          \r\n         const {id} = this.props.match.params;\r\n         const res = await axios.put(`https://jsonplaceholder.typicode.com/users/${id}`, updContact);\r\n         dispatch({type: 'UPDATE_CONTACT', payload: res.data});\r\n        \r\n         this.setState({\r\n             //clear state\r\n            name: '',\r\n            email: '',\r\n            phone: '',\r\n            errors: {}\r\n            });\r\n            \r\n            this.props.history.push(\"/\");\r\n     };\r\n  \r\n     onChange = e => this.setState({ [e.target.name] : e.target.value});\r\n    render() {\r\n        const {name, email, phone, errors} = this.state;\r\n\r\n        return(\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value;\r\n                    return(\r\n                        <div className=\"card mb-3\">\r\n                <div className=\"card-header\">Edit Contact</div>\r\n                <div className=\"card-body\">\r\n                    <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                    <TextInputGroup\r\n                        label=\"Name\"\r\n                        name=\"name\"\r\n                        placeholder=\"Enter Name\"\r\n                        value={name}\r\n                        onChange={this.onChange}\r\n                        error={errors.name}\r\n                    />\r\n                    <TextInputGroup\r\n                        label=\"Email\"\r\n                        name=\"email\"\r\n                        type=\"email\"\r\n                        placeholder=\"Enter Email\"\r\n                        value={email}\r\n                        onChange={this.onChange}\r\n                        error={errors.email}\r\n                    />\r\n                    <TextInputGroup\r\n                        label=\"Phone\"\r\n                        name=\"phone\"\r\n                        placeholder=\"Enter Phone\"\r\n                        value={phone}\r\n                        onChange={this.onChange}\r\n                        error={errors.phone}\r\n                    />\r\n                       \r\n                        <input type=\"submit\" value=\"Update Contact\" className=\"btn btn-block btn-danger\"></input>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n                    );\r\n                }}\r\n            </Consumer>\r\n        );\r\n     \r\n    }\r\n}\r\nexport default EditContact;","import React from 'react'\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4\"><span className=\"text-danger\">404</span> Page Not Found</h1>\r\n            <p className=\"lead\">Sorry, that page doesn't exist</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\n\r\n class Test extends Component {\r\n     state={\r\n        title: '',\r\n        body: ''\r\n     };\r\n     componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/posts/1')\r\n        .then(response => response.json())\r\n        .then(data => this.setState({\r\n            title: data.title,\r\n            body: data.body\r\n        }));\r\n     }\r\n    render() {\r\n        const {title, body} = this.state;\r\n        return (\r\n            <div>\r\n                <h1>{title} </h1>\r\n                <p> {body} </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Test;","import React, {Component} from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Contacts from './components/contacts/Contacts';\nimport Header from './components/layout/Header';\nimport About from './components/pages/About';\nimport AddContact from './components/AddContact';\nimport EditContact from './components/contacts/EditContact';\nimport {Provider} from './Context';\nimport {HashRouter as Router, Route, Switch} from 'react-router-dom';\nimport NotFound from './components/pages/NotFound';\nimport Test from './components/test/Test';\nimport Contact from './components/contacts/Contact';\n\nclass App extends Component{\nrender(){\n  return (\n    <Provider>\n     <Router>\n    <div className=\"App\">\n      <Header branding=\"Contact Manager\" />\n      <div className=\"container\">\n        <Switch>\n          <Route exact path=\"/\" component={Contacts} />\n          <Route exact path=\"/about\" component={About} />\n          <Route exact path=\"/contact/Add\" component={AddContact} />\n          <Route exact path=\"/contact/edit/:id\" component={EditContact} />\n          <Route exact path=\"/test\" component={Test} />\n          <Route component={NotFound} />\n          \n        </Switch>\n      </div>\n    </div>\n    </Router>\n    </Provider>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}